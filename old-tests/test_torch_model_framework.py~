import unittest

from heron.models.torchbased import ExactGPHeronCUDA, train
from heron.likelihood import InnerProduct, Likelihood, CUDALikelihood
from heron.models.testing import TestModel, CUDATestModel
from elk.waveform import Timeseries

from torch import tensor
import torch
import gpytorch

import numpy as np
import numpy.testing as npt
np.random.seed(90)


class TestCUDALikelihood(unittest.TestCase):
    device = torch.device("cuda")

    @classmethod
    def setUpClass(cls):
        cls.generator = HeronCUDA(datafile="notebooks/new-data-interface/test_file_2.h5", datalabel="IMR training", 
                          device=cls.device, 
                          noise=[0.000001, 0.0001],
                          lengths={"mass ratio": [0.001, 0.25],
                                   "time": [0.001, 20]}
        )
        with gpytorch.settings.fast_pred_var(), gpytorch.settings.max_cg_iterations(1500):
            train(cls.generator, iterations=50)
